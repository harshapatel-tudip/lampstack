resources:
- name: lampstack-1-vm
  properties:
    canIpForward: false
    disks:
    - autoDelete: true
      boot: true
      deviceName: lampstack-vm-tmpl-boot-disk
      initializeParams:
        diskSizeGb: 10
        diskType: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/zones/us-central1-a/diskTypes/pd-standard
        sourceImage: https://www.googleapis.com/compute/v1/projects/bitnami-launchpad/global/images/bitnami-lampstack-7-1-20-0-linux-debian-9-x86-64
      type: PERSISTENT
    machineType: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/zones/us-central1-a/machineTypes/f1-micro
    metadata:
      items:
      - key: bitnami-base-password
        value: YT2PVi75cqXi
      - key: status-config-url
        value: https://runtimeconfig.googleapis.com/v1beta1/projects/qwiklabs-gcp-3be47a22ae8b21dd/configs/lampstack-1-config
      - key: status-variable-path
        value: status
      - key: status-uptime-deadline
        value: 420
      - key: startup-script
        value: |-
          #!/bin/bash

          set -e

          DEFAULT_UPTIME_DEADLINE="300"  # 5 minutes

          metadata_value() {
            curl --retry 5 -sfH "Metadata-Flavor: Google" \
                 "http://metadata/computeMetadata/v1/$1"
          }

          access_token() {
            metadata_value "instance/service-accounts/default/token" \
            | python -c "import sys, json; print json.load(sys.stdin)['access_token']"
          }

          uptime_seconds() {
            seconds="$(cat /proc/uptime | cut -d' ' -f1)"
            echo ${seconds%%.*}  # delete floating point.
          }

          config_url() { metadata_value "instance/attributes/status-config-url"; }
          instance_id() { metadata_value "instance/id"; }
          variable_path() { metadata_value "instance/attributes/status-variable-path"; }
          project_name() { metadata_value "project/project-id"; }
          uptime_deadline() {
            metadata_value "instance/attributes/status-uptime-deadline" \
                || echo $DEFAULT_UPTIME_DEADLINE
          }

          config_name() {
            python - $(config_url) <<EOF
          import sys, urlparse
          parsed = urlparse.urlparse(sys.argv[1])
          print '/'.join(parsed.path.rstrip('/').split('/')[-4:])
          EOF
          }

          variable_body() {
            encoded_value=$(echo "$2" | base64)
            printf '{"name":"%s", "value":"%s"}\n' "$1" "$encoded_value"
          }

          post_result() {
            var_subpath=$1
            var_value=$2
            var_path="$(config_name)/variables/$var_subpath/$(instance_id)"

            curl --retry 5 -sH "Authorization: Bearer $(access_token)" \
                -H "Content-Type: application/json" \
                -X POST -d "$(variable_body "$var_path" "$var_value")" \
                "$(config_url)/variables"
          }

          post_success() {
            post_result "$(variable_path)/success" "${1:-Success}"
          }

          post_failure() {
            post_result "$(variable_path)/failure" "${1:-Failure}"
          }

          # The contents of initScript are contained within this function.
          custom_init() (
            return 0
          )

          # The contents of checkScript are contained within this function.
          check_success() (
            failed=$(/etc/init.d/bitnami status \
                | grep "not running" | cut -d" " -f1 | tr "\n" " ")
            if [ ! -z "$failed" ]; then
              echo "Processes failed to start: $failed"
              exit 1
            fi
          )

          check_success_with_retries() {
            deadline="$(uptime_deadline)"
            while [ "$(uptime_seconds)" -lt "$deadline" ]; do
              message=$(check_success)
              case $? in
              0)
                # Success.
                return 0
                ;;
              1)
                # Not ready; continue loop
                ;;
              *)
                # Failure; abort.
                echo $message
                return 1
                ;;
              esac

              sleep 5
            done

            # The check was not successful within the required deadline.
            echo "status check timeout"
            return 1
          }

          do_init() {
            # Run the init script first. If no init script was specified, this
            # is a no-op.
            echo "software-status: initializing..."

            set +e
            message="$(custom_init)"
            result=$?
            set -e

            if [ $result -ne 0 ]; then
              echo "software-status: init failure"
              post_failure "$message"
              return 1
            fi
          }

          do_check() {
            # Poll for success.
            echo "software-status: waiting for software to become ready..."
            set +e
            message="$(check_success_with_retries)"
            result=$?
            set -e

            if [ $result -eq 0 ]; then
              echo "software-status: success"
              post_success
            else
              echo "software-status: failed with message: $message"
              post_failure "$message"
            fi
          }

          # Run the initialization script synchronously.
          do_init || exit $?

          # The actual software initialization might come after google's init.d
          # script that executes our startup script. Thus, launch this script
          # into the background so that it does not block init and eventually
          # timeout while waiting for software to start.
          do_check & disown
      - key: google-monitoring-enable
        value: '0'
      - key: google-logging-enable
        value: '0'
    networkInterfaces:
    - accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
      network: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/global/networks/default
      subnetwork: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/regions/us-central1/subnetworks/default
    serviceAccounts:
    - email: default
      scopes:
      - https://www.googleapis.com/auth/cloud.useraccounts.readonly
      - https://www.googleapis.com/auth/devstorage.read_only
      - https://www.googleapis.com/auth/logging.write
      - https://www.googleapis.com/auth/monitoring.write
      - https://www.googleapis.com/auth/cloudruntimeconfig
    tags:
      items:
      - lampstack-1-tcp-80
      - lampstack-1-tcp-443
    zone: us-central1-a
  type: compute.v1.instance
- name: lampstack-1-config
  properties:
    config: lampstack-1-config
    description: Holds software readiness status for lampstack-1
  type: runtimeconfig.v1beta1.config
- metadata:
    dependsOn:
    - lampstack-1-vm
    - lampstack-1-config
  name: lampstack-1-software
  properties:
    failure:
      cardinality:
        number: 1
        path: status/failure
    parent: $(ref.lampstack-1-config.name)
    success:
      cardinality:
        number: 1
        path: status/success
    timeout: 480s
    waiter: software
  type: runtimeconfig.v1beta1.waiter
- name: lampstack-1-tcp-80
  properties:
    allowed:
    - IPProtocol: TCP
      ports:
      - '80'
    network: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/global/networks/default
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - lampstack-1-tcp-80
  type: compute.v1.firewall
- name: lampstack-1-tcp-443
  properties:
    allowed:
    - IPProtocol: TCP
      ports:
      - '443'
    network: https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-3be47a22ae8b21dd/global/networks/default
    sourceRanges:
    - 0.0.0.0/0
    targetTags:
    - lampstack-1-tcp-443
  type: compute.v1.firewall
